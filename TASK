                                                                                                     TASK
                                                                                                   ========
                                                                         




1. check if a number is negative number or positive number:


public class SignChecker {
    public static void main(String[] args) {
        int number = 10;
        if (number > 0) {
            System.out.println("Positive number");
        } else if (number < 0) {
            System.out.println("Negative number");
        } else {
            System.out.println("Zero");
        }
    }
}

2. Algorithm for Registering & logging into your website

Algorithm: Website Registration and Login

Registration:
1. Open the website registration page.
2. Fill in the required registration details (e.g., username, email, password).
3. Submit the registration form.

Login:
1. Open the website login page.
2. Enter the registered username and password.
3. Click on the login button.
4. If the credentials are correct, allow access to the user account.
java
Copy code
// Code Implementation
public class WebsiteAuthAlgorithm {
    public static void main(String[] args) {
        // Registration
        System.out.println("Open registration page and fill in the required details.");
        // Logic to submit registration form
        System.out.println("Registration successful.");

        // Login
        System.out.println("Open login page and enter username and password.");
        // Logic to validate credentials and grant access
        System.out.println("Login successful. Access granted to user account.");
    }
}


 3. Algorithm to check if a number is negative number or positive number:

1. Input a number.
2. If the number is greater than zero, it is a positive number.
3. If the number is less than zero, it is a negative number.
4. If the number is zero, it is neither positive nor negative.
java
Copy code
// Code Implementation
public class SignCheckAlgorithm {
    public static void main(String[] args) {
        int number = -5;
        if (number > 0) {
            System.out.println("Positive number");
        } else if (number < 0) {
            System.out.println("Negative number");
        } else {
            System.out.println("Zero");
        }
    }
}

4. Algorithm to check if a number is prime:


Algorithm: Check Prime Number

1. Input a number.
2. If the number is less than 2, it is not a prime number.
3. Iterate from 2 to the square root of the number:
   a. If the number is divisible by any integer in this range, it is not a prime number.
4. If the number passes step 3 without being divisible, it is a prime number.


// Code Implementation
public class PrimeCheckAlgorithm {
    public static void main(String[] args) {
        int number = 17;
        boolean isPrime = true;
        if (number <= 1) {
            isPrime = false;
        } else {
            for (int i = 2; i <= Math.sqrt(number); i++) {
                if (number % i == 0) {
                    isPrime = false;
                    break;
                }
            }
        }
        if (isPrime) {
            System.out.println(number + " is a prime number");
        } else {
            System.out.println(number + " is not a prime number");
        }
    }
}


5.  Algorithm to check if a number is Armstrong:

Algorithm: Check Armstrong Number

1. Input a number.
2. Find the sum of the cubes of each digit in the number.
3. If the sum is equal to the original number, it is an Armstrong number.


// Code Implementation
 6. public class ArmstrongCheckAlgorithm {
    public static void main(String[] args) {
        int number = 153;
        int originalNumber = number;
        int sum = 0;
        while (number != 0) {
            int digit = number % 10;
            sum += Math.pow(digit, 3);
            number /= 10;
        }
        if (sum == originalNumber) {
            System.out.println(originalNumber + " is an Armstrong number");
        } else {
            System.out.println(originalNumber + " is not an Armstrong number");
        }
    }
}

7 . Algorithm to check if a year is leap year or not:


Algorithm: Check Leap Year

1. Input a year.
2. If the year is divisible by 4 and not divisible by 100, or divisible by 400, it is a leap year.
java
Copy code
// Code Implementation
public class LeapYearCheckAlgorithm {
    public static void main(String[] args) {
        int year = 2024;
        boolean isLeapYear = false;
        if (year % 4 == 0) {
            if (year % 100 != 0 || year % 400 == 0) {
                isLeapYear = true;
            }
        }
        if (isLeapYear) {
            System.out.println(year + " is a leap year");
        } else {
            System.out.println(year + " is not a leap year");
        }
    }
}

 8. Algorithm to find n factorial of a number:


Algorithm: Calculate Factorial

1. Input a number n.
2. Initialize factorial as 1.
3. Iterate from 1 to n:
   a. Multiply factorial by the current number.
4. Return factorial as the result.
java
Copy code
// Code Implementation
public class FactorialAlgorithm {
    public static void main(String[] args) {
        int n = 5;
        long factorial = 1;
        for (int i = 1; i <= n; i++) {
            factorial *= i;
        }
        System.out.println("Factorial of " + n + " is " + factorial);
    }
}
8.  Algorithm to find Fibonacci of a given number:


Algorithm: Calculate Fibonacci

1. Input a number n.
2. Initialize two variables, a and b, as 0 and 1 respectively.
3. Iterate n times:
   a. Calculate the next Fibonacci number by adding a and b.
   b. Update a to b and b to the calculated Fibonacci number.
4. Return the value of b as the result.
java
Copy code
// Code Implementation
public class FibonacciAlgorithm {
    public static void main(String[] args) {
        int n = 10;
        int a = 0, b = 1;
        for (int i = 1; i <= n; i++) {
            System.out.print(a + " ");
            int sum = a + b;
            a = b;
            b = sum;
        }
    }
}

9. Algorithm to find even numbers existing in an array between the starting and ending position you give:

Algorithm: Find Even Numbers in Array Range

1. Input an array and starting and ending positions.
2. Iterate through the elements of the array between the starting and ending positions:
   a. Check if the current element is even.
   b. If it is even, store it in a separate list.
3. Return the list containing even numbers.
java
Copy code
// Code Implementation
public class EvenNumbersFinderAlgorithm {
    public static void main(String[] args) {
        int[] array = {2, 5, 8, 10, 12, 15, 20};
        int start = 2;
        int end = 5;
        System.out.print("Even numbers between positions " + start + " and " + end + ": ");
        for (int i = start; i <= end; i++) {
            if (array[i] % 2 == 0) {
                System.out.print(array[i] + " ");
            }
        }
    }
}

10.  Algorithm to find the sum of a sub-array you pick dynamically should be greater than 10 and copy those values into another array:

Algorithm: Find and Copy Sub-array with Sum Greater than 10

1. Input an array.
2. Iterate through all possible sub-arrays:
   a. Calculate the sum of each sub-array.
   b. If the sum is greater than 10, copy the sub-array values into another array.
3. Return the copied sub-array.
java
Copy code
// Code Implementation
public class SubArraySumCheckerAlgorithm {
    public static void main(String[] args) {
        int[] array = {2, 5, 8, 10, 12, 15, 20};
        int[] resultArray = new int[array.length]; // Assuming worst case
        int index = 0;
        for (int i = 0; i < array.length; i++) {
            int sum = 0;
            for (int j = i; j < array.length; j++) {
                sum += array[j];
                if (sum > 10) {
                    for (int k = i; k <= j; k++) {
                        resultArray[index++] = array[k];
                    }
                    break;
                }
            }
        }
        System.out.print("Resultant array with sub-array sum greater than 10: ");
        for (int i = 0; i < index; i++) {
            System.out.print(resultArray[i] + " ");
        }
    }
}
These algorithms are provided with their respective code implementations in Java. You can run each code snippet independently to see the output. Let me know if you need further assistance!







Message ChatGPTâ€¦


